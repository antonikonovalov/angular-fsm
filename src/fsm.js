// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var FSM, module, service;

  service = angular.module('fsm.service', []);

  FSM = (function() {
    function FSM() {}

    FSM.prototype.states = {};

    FSM.prototype.setInitialState = function(initial) {
      this.initial = initial;
      return this;
    };

    FSM.prototype.setCurrentState = function(current) {
      this.current = current;
      return this;
    };

    FSM.prototype.reset = function() {
      return this.current = this.initial;
    };

    FSM.prototype.addState = function(state, symbol, next, action) {
      if (this.states[state] == null) {
        this.states[state] = {};
      }
      this.states[state][symbol] = {
        next: next,
        action: action
      };
      return this;
    };

    FSM.prototype.removeState = function(state, symbol) {
      if (symbol != null) {
        delete this.states[state][symbol];
      } else {
        delete this.states[state];
      }
      return this;
    };

    FSM.prototype.normalize = function(symbol) {
      return {
        symbol: symbol
      };
    };

    FSM.prototype.process = function(rawSymbol) {
      var state, symbol;
      state = this.states[this.current];
      rawSymbol = this.normalize(rawSymbol);
      symbol = rawSymbol.symbol;
      console.log("Current State ", this.current, " got symbol ", symbol);
      if (!state[symbol] && state['*']) {
        console.log("Unrecognized symbol ", symbol, ", using *");
        symbol = '*';
      }
      if (state[symbol].action != null) {
        state[symbol].action(rawSymbol);
      }
      if (state[symbol].next) {
        this.current = state[symbol].next;
      } else {
        console.log("Don't know how to handle symbol ", rawSymbol.symbol);
      }
      return this;
    };

    return FSM;

  })();

  service.factory('FSM', [
    function() {
      return FSM;
    }
  ]);

  module = angular.module('fsm', ['fsm.service']);

  module.provider('Fsm', [
    function() {
      var conf;
      conf = {};
      this.config = function(config) {
        return conf = config;
      };
      this.$get = [
        'FSM', function(FSM) {
          console.log("FSM =>", FSM);
          return new FSM();
        }
      ];
      return this;
    }
  ]);

}).call(this);

//# sourceMappingURL=fsm.map
